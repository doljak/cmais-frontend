<?php
header('Content-type: text/html; charset=utf-8');
mb_internal_encoding('UTF-8');

/**
 * VideoDropbox
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    astolfo
 * @subpackage model
 * @author     Emerson Estrella
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class VideoDropbox extends BaseVideoDropbox
{

	private $channels = array(
		"rodaviva"          =>array('channel'=>'rodaviva','site_id'=>'96','genre'=>'News'),
		"jornaldacultura"   =>array('channel'=>'jornaldacultura','site_id'=>'216','genre'=>'News'),
		"vitrine"           =>array('channel'=>'vitrine','site_id'=>'201','genre'=>'Entertainment'),
		"metropolis"        =>array('channel'=>'metropolis','site_id'=>'110','genre'=>'Entertainment'),
    "tv-cultura"        =>array('channel'=>'cultura','site_id'=>'2','genre'=>'Entertainment'),
    "tv-ra-tim-bum"     =>array('channel'=>'cultura','site_id'=>'5','genre'=>'Entertainment'),
    "tvculturadev"      =>array('channel'=>'tvculturadev','site_id'=>'1','genre'=>'Entertainment')
	);

	public function processPenddingInsertAction() {
		//check action and status
		if((($this->getAction() == "Insert")||($this->getAction() == "Update"))&&($this->getStatus() == "Pendding")){
		    //check if files exists
			if(is_file(sfConfig::get('sf_upload_dir').'/assets/video/original/'.$this->AssetVideo->getOriginalFile())){
        if($this->AssetVideo->Asset->Site->getYoutubeChannel() != ""){
          $channel  = $this->AssetVideo->Asset->Site->getYoutubeChannel();
        }else{
          $channel = "cultura";
        }
        if($this->AssetVideo->Asset->Site->getYoutubeGenre() != ""){
          $genre    = $this->AssetVideo->Asset->Site->getYoutubeGenre();
        }else{
          $genre = "Entertainment";
        }

				$file = $this->AssetVideo->getOriginalFile();
				$has_file = true;
				$folder = time();
				$file_folder = sfConfig::get('sf_upload_dir')."/assets/video/original/";

				//Media properties
				$title = utf8_encode(trim(substr(str_replace('\n',' ',str_replace('&','&amp;',$this->AssetVideo->Asset->getTitle())),0,95)));
				$description = utf8_encode(trim(str_replace('\n',' ',str_replace('&','&amp;',$this->AssetVideo->Asset->getDescription()))));
				$words = $this->AssetVideo->Asset->getTags();
				$headline = ($this->AssetVideo->getHeadline()=="") ? 'Sem notas' : $this->AssetVideo->getHeadline();
				$description = ($description=="") ? 'TV Cultura' : $description;
				if(count($words) <= 0) $words[] = 'TV Cultura';
				
				//Folder
				$this->setFolder($folder);
				$this->save();
				
				$dropboxDir = sfConfig::get('sf_upload_dir').'/dropbox/'.$this->getFolder();
				if(!is_dir($dropboxDir))
					mkdir($dropboxDir, 0777);
				chdir($dropboxDir);

				$asset_id = '';
				if($this->getAction() != "Insert")
					$asset_id .= ' id="'.$this->AssetVideo->getYoutubeId().'"';

				//XML
				$content = <<<EOT
<?xml version="1.0"?>
<feed xmlns="http://www.youtube.com/schemas/cms/2.0"
    notification_email="emersonestrella@tvcultura.com.br" strict="True">
EOT;

				if($this->getAction() == "Insert"){
					$content .= <<<EOT

  <asset type="web">
    <custom_id>CULTURA-{$this->AssetVideo->getId()}</custom_id>
    <description>{$description}</description>
    <notes>{$headline}</notes>
    <title>{$title}</title>
    <url>http://www.tvcultura.com.br/</url>
  </asset>

  <!-- define reference files -->
  <file type="video">
    <filename>{$file}</filename>
  </file>

EOT;
				}
  
				$content .= <<<EOT

  <!-- define the video metadata -->
  <video{$asset_id}>
    <allow_comments>Approve</allow_comments>
    <allow_embedding>True</allow_embedding>
    <allow_ratings>True</allow_ratings>
    <allow_responses>Approve</allow_responses>
    <start_time>1997-07-16T19:20:30+01:00</start_time>
    <!-- <public>True</public> -->
    <channel>{$channel}</channel>
    <title>{$title}</title>
    <description>{$description}</description>
    <genre>{$genre}</genre>
EOT;

			if(count($words)>0){
				foreach($words as $word){
					$word = trim($word);
					if($word != ""){
						$content .= utf8_encode("
    <keyword>{$word}</keyword>");
					}
				}
      }
				
				$content .= <<<EOT
  </video>
EOT;

				if($this->getAction() == "Insert"){

					$content .= <<<EOT

  <!-- connect all of the video files in the feed to the movie asset -->
  <relationship>
    <item path="/feed/asset[1]" />
    <related_item path="/feed/file[1]" />
  </relationship>
  <relationship>
    <item path="/feed/video[1]" />
    <related_item path="/feed/file[1]" />
  </relationship>
  
  <!-- Rights administration rules are the same as ownership -->
  <rights_admin type="usage" owner="True"/>
  <rights_admin type="match" owner="True"/>

  <!-- Worldwide ownership for the asset -->
  <ownership asset="/feed/asset[1]">
    <owner type="partner" name="tvcultura" />
  </ownership>

  <!-- Claim the video and set a usage policy to a saved policy. -->
  <claim type="audiovisual"
      asset="/feed/asset[1]"
      video="/feed/video[1]"
      rights_admin="/feed/rights_admin[1]"
      rights_policy="/external/rights_policy[@name='Track in all countries']"/>

  <!-- Set administrator's default match policy using a saved policy. -->
  <relationship>
    <item path="/feed/rights_admin[@type='match']" />
    <item path="/external/rights_policy[@name='Track in all countries']" />
    <related_item path="/feed/asset[1]" />
  </relationship>
EOT;
				}

				$content .= <<<EOT

</feed>
EOT;

				//Write 2.0XML 
				$fp = fopen($folder.'.xml', 'a+');
        fwrite($fp, utf8_decode($content));
				fclose($fp);
				chmod($folder.'.xml',0777);

				//Create exec.php
		        $exec = 
<<<EOT
#!/usr/bin/php
<?php
ini_set("upload_max_filesize", "10000M");
ini_set("post_max_size", "10000M");
ini_set("memory_limit", "10000M");
ini_set("display_errors", -1);

require_once(\$_SERVER['PWD'].'/../../../../config/ProjectConfiguration.class.php');
\$configuration = ProjectConfiguration::getApplicationConfiguration('backend', 'prod', false);
\$context = sfContext::createInstance(\$configuration);

error_reporting(E_ALL);
ini_set('display_errors', '1');


# Update dropbox status
\$d = Doctrine_Core::getTable('VideoDropbox')->findoneById({$this->getId()});
\$d->setStatus('Processing');
\$d->save();


#SFTP
\$connection = ssh2_connect('tvcultura.xfer.youtube.com', 22, array('hostkey', 'ssh-dss'));
if (ssh2_auth_pubkey_file(\$connection, 'tvcultura', '/var/astolfo/.ssh/id_dsa.pub', '/var/astolfo/.ssh/id_dsa')) {	
	echo "Public Key Authentication Successful";\n
	\$sftp = ssh2_sftp(\$connection);
	if(mkdir("ssh2.sftp://\$sftp/$folder"))
		echo "$folder Folder Successful Created";
	else
		echo "$folder Folder Creation Failed";
		
EOT;

				if($this->getAction() == "Insert"){
					$exec .= <<<EOT

	# Video: $file
	sleep(1);
	print ".";
	flush();
	\$stream = @fopen("ssh2.sftp://\$sftp/$folder/$file", 'w');
	try {
		if(!\$stream)
			throw new Exception("Could not open stream");
		\$data_to_send = @file_get_contents("$file_folder$file");
		if(\$data_to_send === false)
			throw new Exception("Could not open local file: $file_folder$file");
		if(@fwrite(\$stream, \$data_to_send) === false)
			throw new Exception("Could not send data");			
	} catch (Exception \$e) {
		echo \$e->getMessage();
	}

EOT;
				}
	
				$exec .= <<<EOT
	# XML: {$folder}.xml
	sleep(1);
	print ".";
	flush();
	\$stream = @fopen("ssh2.sftp://\$sftp/$folder/$folder.xml", 'w');
	try {
		if(!\$stream)
			throw new Exception("Could not open stream");
		\$data_to_send = @file_get_contents("$dropboxDir/$folder.xml");
		if(\$data_to_send === false)
			throw new Exception("Could not open local file: $dropboxDir$folder.xml");
		if(@fwrite(\$stream, \$data_to_send) === false)
			throw new Exception("Could not send data");			
	} catch (Exception \$e) {
		echo \$e->getMessage();
	}
	
	# Delivery complete
	\$stream = @fopen("ssh2.sftp://\$sftp/$folder/delivery.complete", 'w');
	try {
		if(!\$stream)
			throw new Exception("Could not open stream");
		if(@fwrite(\$stream, '1') === false)
			throw new Exception("Could not send data");			
    } catch (Exception \$e) {
		echo \$e->getMessage();
	}
	
	# Update dropbox status
	\$d = Doctrine_Core::getTable('VideoDropbox')->findoneById({$this->getId()});
	\$d->setStatus('Waiting Youtube');
	\$d->save();
	
} else {
	echo "Public Key Authentication Failed";\n
}
EOT;

				//Write exec.php
				$fp = fopen('exec.php', 'a+');
				fwrite($fp, $exec);
				fclose($fp);
				chmod('exec.php',0777);
        //chown('exec.php','www-data');

				$exec_string = "/usr/bin/php -q /var/astolfo/web/uploads/dropbox/$folder/exec.php 2>&1 > log.txt | at now\n";
				$aux = shell_exec("echo \"".$exec_string."\" > run.sh");
			  $aux = shell_exec('chmod +x run.sh');

				//print `echo /usr/bin/php -q /home/emerson/Aptana\ Studio\ 3\ Workspace/astolfo/web/uploads/dropbox/$folder/exec.php | at now`;

				echo exec("./run.sh > /dev/null &");			
				
		    	//echo exec("./run.sh > /dev/null &");
			    //echo exec("./run.sh");
			    
			    //print "OK ($folder)<br />";
					
				//die();
	
				return true;

			}
			else{
				$this->delete();
			}

		}
		else{
			return false;
		}

	}

	public function checkYoutubeStatus() {
		error_reporting(E_ALL);
		ini_set('display_errors', '1');

		//check action and status
		if((($this->getAction() == "Insert")||($this->getAction() == "Update"))&&($this->getStatus() == "Waiting Youtube")){
			$connection = ssh2_connect('tvcultura.xfer.youtube.com', 22, array('hostkey', 'ssh-dss'));
			if(ssh2_auth_pubkey_file($connection, 'tvcultura', '/var/astolfo/.ssh/id_dsa.pub', '/var/astolfo/.ssh/id_dsa')) {	
				//echo "Public Key Authentication Successful";
				$sftp = ssh2_sftp($connection);
				
				$f = "/".$this->getFolder();
				$dir = "ssh2.sftp://$sftp/".$this->getFolder();
				$ff = str_replace("//","","/".$this->getFolder());
				$file = "status-".$this->getFolder().".xml";
        
        //print ">>>".'ssh2.sftp://'.$sftp.'/'.$f.'/'.$file;

        $stream = @fopen('ssh2.sftp://'.$sftp.'/'.$f.'/'.$file, 'r');

				//if(is_file('ssh2.sftp://'.$sftp.'/'.$f.'/'.$file)){
        if($stream){

					$stream = fopen('ssh2.sftp://'.$sftp.'/'.$f.'/'.$file, 'r');
		      if(!$stream)
		        throw new Exception("Could not open file: $file");

		      $contents = stream_get_contents($stream, -1);            					
		      fclose($stream);
									
		      @unlink(sfConfig::get('sf_upload_dir').'/dropbox/'.substr($ff,1,strlen($ff))."/status-".substr($ff,1,strlen($ff)).".xml");
		      file_put_contents(sfConfig::get('sf_upload_dir').'/dropbox/'.substr($ff,1,strlen($ff))."/status-".substr($ff,1,strlen($ff)).".xml", $contents);
		      @fclose($stream);
          
					$xml = new SimpleXMLElement($contents);
					$return = true;
					foreach ($xml->action as $action) {
						//Parent
						//print "<br>p>>".$action['name'];
						//print "<br>p>>>>".$action->status;
						if($action->status == "Failure"){
							$return = false;
							$returnText = $action->status_detail;
              $aux = explode("video ID is ", $returnText);
              if(count($aux) > 1)
                $returnId = substr(end($aux), 0, strlen(end($aux))-1);
							//print "<br>>>>>>>>>>>".$action->status_detail;
						}
						//Children
						if(count($action->action > 0)){
							foreach($action->action as $action) {
								//print "<br>c>>".$action['name'];
								//print "<br>c>>>>".$action->status;
								if($action->status == "Failure"){
									$return = false;
									$returnText = $action->status_detail;
                  $aux = explode("video ID is ", $returnText);
                  if(count($aux) > 1)
                    $returnId = substr(end($aux), 0, strlen(end($aux))-1);
									//print "<br>>>>>>>>>>>".$action->status_detail;
								}
								elseif(($action['name'] == "Submit video") && ($action->status == "Success")){
									$return = true;
									$returnText = $action->status_detail." - ".$action->id;
									$returnId = $action->id;
									//print "<br>>>>>>>>>>>".$action->status_detail;
								}
							}
						}
					}

          if(isset($returnId)){
            $this->setYoutubeId($returnId);
            $v = Doctrine_Core::getTable('AssetVideo')->findoneById($this->AssetVideo->getId());
            $v->setYoutubeId($returnId);
            $v->save();
            $return = true;
          }

					if(!$return){
						$this->setStatus("Failure");
            if(isset($returnText))
						  $this->setMessage($returnText);
						$this->save();
						return 2;
					}else{
						$this->setStatus("Success");
            if(isset($returnText))
						  $this->setMessage($returnText);
						$this->save();
						return 1;
					}
				
				}else{
					return 3;
				}
			}
			else {
				echo "Public Key Authentication Failed";
			}
		}
	}

}

